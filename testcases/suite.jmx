<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="ILIAS Performance Testsuite" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Global Testsuite Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">PROTOCOL</stringProp>
            <stringProp name="Argument.value">${__P(PROTOCOL,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HOST" elementType="Argument">
            <stringProp name="Argument.name">HOST</stringProp>
            <stringProp name="Argument.value">${__P(HOST,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH" elementType="Argument">
            <stringProp name="Argument.name">PATH</stringProp>
            <stringProp name="Argument.value">${__P(PATH,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">${__P(PORT,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CLIENT_ID" elementType="Argument">
            <stringProp name="Argument.name">CLIENT_ID</stringProp>
            <stringProp name="Argument.value">${__P(CLIENT_ID,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="THREADS" elementType="Argument">
            <stringProp name="Argument.name">THREADS</stringProp>
            <stringProp name="Argument.value">${__P(THREADS,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RAMP_UP" elementType="Argument">
            <stringProp name="Argument.name">RAMP_UP</stringProp>
            <stringProp name="Argument.value">${__P(RAMP_UP,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOOPS" elementType="Argument">
            <stringProp name="Argument.name">LOOPS</stringProp>
            <stringProp name="Argument.value">${__P(LOOPS,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="WORK_DIR" elementType="Argument">
            <stringProp name="Argument.name">WORK_DIR</stringProp>
            <stringProp name="Argument.value">${__P(WORK_DIR,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OUT_DIR" elementType="Argument">
            <stringProp name="Argument.name">OUT_DIR</stringProp>
            <stringProp name="Argument.value">${__P(OUT_DIR,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CREDENTIALS_CSV" elementType="Argument">
            <stringProp name="Argument.name">CREDENTIALS_CSV</stringProp>
            <stringProp name="Argument.value">${__P(CREDENTIALS_CSV,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IS_ADMIN" elementType="Argument">
            <stringProp name="Argument.name">IS_ADMIN</stringProp>
            <stringProp name="Argument.value">${__P(IS_ADMIN,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="READ_ONLY" elementType="Argument">
            <stringProp name="Argument.name">READ_ONLY</stringProp>
            <stringProp name="Argument.value">${__P(READ_ONLY,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USERNAME" elementType="Argument">
            <stringProp name="Argument.name">USERNAME</stringProp>
            <stringProp name="Argument.value">${__P(USERNAME,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">PASSWORD</stringProp>
            <stringProp name="Argument.value">${__P(PASSWORD,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CALENDAR_DATE" elementType="Argument">
            <stringProp name="Argument.name">CALENDAR_DATE</stringProp>
            <stringProp name="Argument.value">${__P(CALENDAR_DATE,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CALENDAR_SESSION_REF_ID" elementType="Argument">
            <stringProp name="Argument.name">CALENDAR_SESSION_REF_ID</stringProp>
            <stringProp name="Argument.value">${__P(CALENDAR_SESSION_REF_ID,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CALENDAR_SESSION_NAME" elementType="Argument">
            <stringProp name="Argument.name">CALENDAR_SESSION_NAME</stringProp>
            <stringProp name="Argument.value">${__P(CALENDAR_SESSION_NAME,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COURSE_99_SESSIONS_REF_ID" elementType="Argument">
            <stringProp name="Argument.name">COURSE_99_SESSIONS_REF_ID</stringProp>
            <stringProp name="Argument.value">${__P(COURSE_99_SESSIONS_REF_ID,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COURSE_99_SESSIONS_NAME" elementType="Argument">
            <stringProp name="Argument.name">COURSE_99_SESSIONS_NAME</stringProp>
            <stringProp name="Argument.value">${__P(COURSE_99_SESSIONS_NAME,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COURSE_50_SESSIONS_REF_ID" elementType="Argument">
            <stringProp name="Argument.name">COURSE_50_SESSIONS_REF_ID</stringProp>
            <stringProp name="Argument.value">${__P(COURSE_50_SESSIONS_REF_ID,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COURSE_50_SESSIONS_NAME" elementType="Argument">
            <stringProp name="Argument.name">COURSE_50_SESSIONS_NAME</stringProp>
            <stringProp name="Argument.value">${__P(COURSE_50_SESSIONS_NAME,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COURSE_10_SESSIONS_REF_ID" elementType="Argument">
            <stringProp name="Argument.name">COURSE_10_SESSIONS_REF_ID</stringProp>
            <stringProp name="Argument.value">${__P(COURSE_10_SESSIONS_REF_ID,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="COURSE_10_SESSIONS_NAME" elementType="Argument">
            <stringProp name="Argument.name">COURSE_10_SESSIONS_NAME</stringProp>
            <stringProp name="Argument.value">${__P(COURSE_10_SESSIONS_NAME,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FORUM_10_POSTS_REF_ID" elementType="Argument">
            <stringProp name="Argument.name">FORUM_10_POSTS_REF_ID</stringProp>
            <stringProp name="Argument.value">${__P(FORUM_10_POSTS_REF_ID,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FORUM_10_POSTS_NAME" elementType="Argument">
            <stringProp name="Argument.name">FORUM_10_POSTS_NAME</stringProp>
            <stringProp name="Argument.value">${__P(FORUM_10_POSTS_NAME,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FORUM_10_POSTS_THREAD_PK" elementType="Argument">
            <stringProp name="Argument.name">FORUM_10_POSTS_THREAD_PK</stringProp>
            <stringProp name="Argument.value">${__P(FORUM_10_POSTS_THREAD_PK,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FORUM_50_POSTS_REF_ID" elementType="Argument">
            <stringProp name="Argument.name">FORUM_50_POSTS_REF_ID</stringProp>
            <stringProp name="Argument.value">${__P(FORUM_50_POSTS_REF_ID,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FORUM_50_POSTS_NAME" elementType="Argument">
            <stringProp name="Argument.name">FORUM_50_POSTS_NAME</stringProp>
            <stringProp name="Argument.value">${__P(FORUM_50_POSTS_NAME,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FORUM_50_POSTS_THREAD_PK" elementType="Argument">
            <stringProp name="Argument.name">FORUM_50_POSTS_THREAD_PK</stringProp>
            <stringProp name="Argument.value">${__P(FORUM_50_POSTS_THREAD_PK,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FORUM_100_POSTS_REF_ID" elementType="Argument">
            <stringProp name="Argument.name">FORUM_100_POSTS_REF_ID</stringProp>
            <stringProp name="Argument.value">${__P(FORUM_100_POSTS_REF_ID,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FORUM_100_POSTS_NAME" elementType="Argument">
            <stringProp name="Argument.name">FORUM_100_POSTS_NAME</stringProp>
            <stringProp name="Argument.value">${__P(FORUM_100_POSTS_NAME,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FORUM_100_POSTS_THREAD_PK" elementType="Argument">
            <stringProp name="Argument.name">FORUM_100_POSTS_THREAD_PK</stringProp>
            <stringProp name="Argument.value">${__P(FORUM_100_POSTS_THREAD_PK,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FORUM_THREADS_NAME" elementType="Argument">
            <stringProp name="Argument.name">FORUM_THREADS_NAME</stringProp>
            <stringProp name="Argument.value">${__P(FORUM_THREADS_NAME,#NV)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">import from properties - always default to &apos;#NV&apos; if not supplied</stringProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
        <stringProp name="HTTPSampler.port">${PORT}</stringProp>
        <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path">${PATH}</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
      </CookieManager>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Startup" enabled="true">
        <stringProp name="TestPlan.comments">stop after any error</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <longProp name="ThreadGroup.start_time">1451388741000</longProp>
        <longProp name="ThreadGroup.end_time">1451388741000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Assert Imported Variables" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="PROTOCOL" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="488764481">(?!#NV)https|http</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">http, https</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">PROTOCOL</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="HOST" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-856324860">(?!#NV).*</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">domain or ip, e.g. www.ilias.de, localhost, 127.0.0.1</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">HOST</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="PATH" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-856324860">(?!#NV).*</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">may be empty - e.g. /path/to/ilias, /docu, /test51, ..</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">PATH</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="PORT" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-776220837">(?!#NV)\d+</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">digit</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">PORT</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CLIENT_ID" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-856324859">(?!#NV).+</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">may not be empty or null [equals not &quot;&quot; fails for null, i.e. yields true]</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">CLIENT_ID</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="THREADS" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-776220837">(?!#NV)\d+</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">digit</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">THREADS</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="RAMP_UP" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-776220837">(?!#NV)\d+</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">digit</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">RAMP_UP</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="LOOPS" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-776220837">(?!#NV)\d+</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">LOOPS</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="WORK_DIR" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-856324859">(?!#NV).+</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">may not be empty or null [equals not &quot;&quot; fails for null, i.e. yields true]</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">WORK_DIR</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="IS_ADMIN" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="412828714">true|TRUE|false|FALSE</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">IS_ADMIN</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If no CREDENTIALS_CSV" enabled="true">
          <stringProp name="IfController.condition">&quot;${CREDENTIALS_CSV}&quot;==&quot;#NV&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Assert Credentials" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="USERNAME" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-856324859">(?!#NV).+</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">may not be empty or null [must use regex, because &quot;Not&quot; is buggy for null values, i.e. &quot;must not equal ``&quot; yields true for null]</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">USERNAME</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="PASSWORD" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-856324859">(?!#NV).+</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">may not be empty or null [must use regex, because &quot;Not&quot; is buggy for null values, i.e. &quot;must not equal ``&quot; yields true for null]</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">PASSWORD</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Run Testplan" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMP_UP}</stringProp>
        <longProp name="ThreadGroup.start_time">1450856806000</longProp>
        <longProp name="ThreadGroup.end_time">1450856806000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TEST Login" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Load Login Credentials CSV" enabled="true"/>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If CREDENTIALS_CSV" enabled="true">
              <stringProp name="IfController.condition">&quot;${CREDENTIALS_CSV}&quot;!=&quot;#NV&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="ILIAS Login Credentials CSV" enabled="true">
                <stringProp name="filename">${CREDENTIALS_CSV}</stringProp>
                <stringProp name="fileEncoding">utf8</stringProp>
                <stringProp name="variableNames">USERNAME,PASSWORD</stringProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">true</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
              </CSVDataSet>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Login" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/login.php?client_id=${CLIENT_ID}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetLoginAction" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetLoginAction</stringProp>
              <stringProp name="HtmlExtractor.expr">#form_[name=formlogin]</stringProp>
              <stringProp name="HtmlExtractor.attribute">action</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetLoginUsername" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetLoginUsername</stringProp>
              <stringProp name="HtmlExtractor.expr">#form_[name=formlogin] #username</stringProp>
              <stringProp name="HtmlExtractor.attribute">name</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetLoginPassword" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetLoginPassword</stringProp>
              <stringProp name="HtmlExtractor.expr">#form_[name=formlogin] #password</stringProp>
              <stringProp name="HtmlExtractor.attribute">name</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetlLoginSubmit" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetLoginSubmit</stringProp>
              <stringProp name="HtmlExtractor.expr">#form_[name=formlogin] input[type=submit]</stringProp>
              <stringProp name="HtmlExtractor.attribute">name</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetLoginSubmitV" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetLoginSubmitV</stringProp>
              <stringProp name="HtmlExtractor.expr">#form_[name=formlogin] input[type=submit]</stringProp>
              <stringProp name="HtmlExtractor.attribute">value</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetLoginAction" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36139">#NV</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetLoginAction</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetLoginUsername" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36139">#NV</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetLoginUsername</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetLoginPassword" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36139">#NV</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetLoginPassword</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetLoginSubmit" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36139">#NV</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetLoginSubmit</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetLoginSubmitV" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36139">#NV</stringProp>
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetLoginSubmitV</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Login" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="${ilGetLoginUsername}" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${USERNAME}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">${ilGetLoginUsername}</stringProp>
                </elementProp>
                <elementProp name="${ilGetLoginPassword}" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${PASSWORD}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">${ilGetLoginPassword}</stringProp>
                </elementProp>
                <elementProp name="${ilGetLoginSubmit}" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${ilGetLoginSubmitV}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">${ilGetLoginSubmit}</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/${ilGetLoginAction}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="ON ERROR: Start Next Iteration" enabled="true">
              <intProp name="OnError.action">4</intProp>
            </ResultAction>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilPostLoginAction" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilPostLoginAction</stringProp>
              <stringProp name="HtmlExtractor.expr">#form_[name=formlogin]</stringProp>
              <stringProp name="HtmlExtractor.attribute">action</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilPostLoginAction" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36139">#NV</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilPostLoginAction</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PersonalDesktop" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PersonalSettings" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Ensure personal language is english getFormURL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="baseClass" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ilPersonalDesktopGUI</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">baseClass</stringProp>
                  </elementProp>
                  <elementProp name="cmd" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">jumpToSettings</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">cmd</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetPersonalProfileFormUrl" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetPersonalProfileFormUrl</stringProp>
                <stringProp name="HtmlExtractor.expr">#form_</stringProp>
                <stringProp name="HtmlExtractor.attribute">action</stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              </HtmlExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetPersonalProfileFormUrl" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="36139">#NV</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">12</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetPersonalProfileFormUrl</stringProp>
                <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Ensure personal language is english" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="cmd[saveGeneralSettings]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">cmd[saveGeneralSettings]</stringProp>
                  </elementProp>
                  <elementProp name="language" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">en</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">language</stringProp>
                  </elementProp>
                  <elementProp name="skin_style" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">default:delos</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skin_style</stringProp>
                  </elementProp>
                  <elementProp name="screen_reader_optimization" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">screen_reader_optimization</stringProp>
                  </elementProp>
                  <elementProp name="hits_per_page" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">9999</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">hits_per_page</stringProp>
                  </elementProp>
                  <elementProp name="store_last_visited" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">store_last_visited</stringProp>
                  </elementProp>
                  <elementProp name="bs_allow_to_contact_me" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">bs_allow_to_contact_me</stringProp>
                  </elementProp>
                  <elementProp name="timezone" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Europe/Berlin</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">timezone</stringProp>
                  </elementProp>
                  <elementProp name="date_format" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">date_format</stringProp>
                  </elementProp>
                  <elementProp name="time_format" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">time_format</stringProp>
                  </elementProp>
                  <elementProp name="char_selector_availability" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">char_selector_availability</stringProp>
                  </elementProp>
                  <elementProp name="char_selector_blocks[0]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">all</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">char_selector_blocks[0]</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${PATH}/${ilGetPersonalProfileFormUrl}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetSuccessAfterSaving" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetSuccessAfterSaving</stringProp>
                <stringProp name="HtmlExtractor.expr">.ilAdminRow .alert</stringProp>
                <stringProp name="HtmlExtractor.attribute">class</stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              </HtmlExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetSuccessAfterSaving" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1007402190">alert alert-success</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetSuccessAfterSaving</stringProp>
                <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Empty Password Form can not be saved" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="cmd[savePassword]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">cmd[savePassword]</stringProp>
                  </elementProp>
                  <elementProp name="current_password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">current_password</stringProp>
                  </elementProp>
                  <elementProp name="new_password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">new_password</stringProp>
                  </elementProp>
                  <elementProp name="new_password_retype" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">new_password_retype</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${PATH}/${ilGetPersonalProfileFormUrl}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetErrorAfterSaving" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetErrorAfterSaving</stringProp>
                <stringProp name="HtmlExtractor.expr">.ilAdminRow .alert</stringProp>
                <stringProp name="HtmlExtractor.attribute">class</stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              </HtmlExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetErrorAfterSaving" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-553626632">alert alert-danger</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetErrorAfterSaving</stringProp>
                <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Selected Items" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="baseClass" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ilPersonalDesktopGUI</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">baseClass</stringProp>
                </elementProp>
                <elementProp name="cmd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">jumpToSelectedItems</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">cmd</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetSelectedItemsBlHead" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetSelectedItemsBlHead</stringProp>
              <stringProp name="HtmlExtractor.expr">a#block_pditems_0_blhead.ilAccAnchor</stringProp>
              <stringProp name="HtmlExtractor.attribute">name</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetSelectedItemsBlHead" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1518881310">block_pditems_0_blhead</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetSelectedItemsBlHead</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Mail" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/ilias.php?baseClass=ilMailGUI</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetMailHeaderImage" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetMailHeaderImage</stringProp>
              <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
              <stringProp name="HtmlExtractor.attribute">src</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetMailHeaderImage" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-11153909">/images/icon_mail.svg</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetMailHeaderImage</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Memberships" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="baseClass" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ilPersonalDesktopGUI</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">baseClass</stringProp>
                </elementProp>
                <elementProp name="cmd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">jumpToMemberships</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">cmd</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetMembershipsHead" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetMembershipsHead</stringProp>
              <stringProp name="HtmlExtractor.expr">a#block_pditems_0_blhead.ilAccAnchor</stringProp>
              <stringProp name="HtmlExtractor.attribute">id</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetMembershipsNewsHead" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetMembershipsNewsHead</stringProp>
              <stringProp name="HtmlExtractor.expr">#il_left_col #block_pdnews_0 .ilAccAnchor</stringProp>
              <stringProp name="HtmlExtractor.attribute">id</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetMembershipsHead" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1518881310">block_pditems_0_blhead</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetMembershipsHead</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetMembershipsNewsHead" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-100872481">block_pdnews_0_blhead</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetMembershipsNewsHead</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET News" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="baseClass" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ilPersonalDesktopGUI</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">baseClass</stringProp>
                </elementProp>
                <elementProp name="cmd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">jumpToNews</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">cmd</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetMembershipsHead" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetMembershipsHead</stringProp>
              <stringProp name="HtmlExtractor.expr">#ilAll #mainspacekeeper #mainscrolldiv .ilAccAnchor</stringProp>
              <stringProp name="HtmlExtractor.attribute">id</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetMembershipsNewsForm" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetMembershipsNewsForm</stringProp>
              <stringProp name="HtmlExtractor.expr">#news_per</stringProp>
              <stringProp name="HtmlExtractor.attribute">name</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetMembershipsHead" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1380028607">il_mhead_t_focus</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetMembershipsHead</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetMembershipsNewsForm" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1395182001">news_per</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetMembershipsNewsForm</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Calendar" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONSTRAINT Calendar CommandNode" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="baseClass" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ilPersonalDesktopGUI</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">baseClass</stringProp>
                  </elementProp>
                  <elementProp name="cmd" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">jumpToCalendar</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">cmd</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">ilGetCalendarWeekCommandNode</stringProp>
                <stringProp name="RegexExtractor.regex">cmdClass=ilcalendarweekgui.+?cmdNode=(.+?)&amp;.*?&quot;&gt;</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">ilGetCalendarMonthCommandNode</stringProp>
                <stringProp name="RegexExtractor.regex">cmdClass=ilcalendarmonthgui.+?cmdNode=(.+?)&amp;.*?&quot;&gt;</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">ilGetCalendarDayCommandNode</stringProp>
                <stringProp name="RegexExtractor.regex">cmdClass=ilcalendardaygui.+?cmdNode=(.+?)&amp;.*?&quot;&gt;</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ExtractCalendarDayCommandNode" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="36139">#NV</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">12</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetCalendarDayCommandNode</stringProp>
                <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ExtractCalendarWeekCommandNode" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="36139">#NV</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">12</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ExtractCalendarWeekCommandNode</stringProp>
                <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ExtractCalendarMonthCommandNode" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="36139">#NV</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">12</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ExtractCalendarMonthCommandNode</stringProp>
                <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Calendar Day" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="cmdClass" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ilcalendardaygui</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">cmdClass</stringProp>
                  </elementProp>
                  <elementProp name="baseClass" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ilPersonalDesktopGUI</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">baseClass</stringProp>
                  </elementProp>
                  <elementProp name="seed" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${CALENDAR_DATE}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">seed</stringProp>
                  </elementProp>
                  <elementProp name="cmdNode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${ilGetCalendarDayCommandNode_g1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">cmdNode</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCalendarDayClass" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetCalendarDayClass</stringProp>
                <stringProp name="HtmlExtractor.expr">table.calstd.il-cal-day</stringProp>
                <stringProp name="HtmlExtractor.attribute">class</stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              </HtmlExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCalendarDayClass" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-592694306">calstd il-cal-day</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetCalendarDayClass</stringProp>
                <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Download Calendar Day " enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="cmd" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">downloadFiles</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">cmd</stringProp>
                  </elementProp>
                  <elementProp name="cmdClass" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ilcalendardaygui</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">cmdClass</stringProp>
                  </elementProp>
                  <elementProp name="baseClass" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ilPersonalDesktopGUI</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">baseClass</stringProp>
                  </elementProp>
                  <elementProp name="seed" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${CALENDAR_DATE}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">seed</stringProp>
                  </elementProp>
                  <elementProp name="cmdNode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${ilGetCalendarDayCommandNode_g1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">cmdNode</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCalendarDayClass" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetCalendarDayClass</stringProp>
                <stringProp name="HtmlExtractor.expr">table.calstd.il-cal-day</stringProp>
                <stringProp name="HtmlExtractor.attribute">class</stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              </HtmlExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCalendarDayClass" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-592694306">calstd il-cal-day</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetCalendarDayClass</stringProp>
                <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Calendar Week" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="cmdClass" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ilcalendarweekgui</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">cmdClass</stringProp>
                  </elementProp>
                  <elementProp name="baseClass" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ilPersonalDesktopGUI</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">baseClass</stringProp>
                  </elementProp>
                  <elementProp name="seed" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${CALENDAR_DATE}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">seed</stringProp>
                  </elementProp>
                  <elementProp name="cmdNode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${ilGetCalendarWeekCommandNode_g1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">cmdNode</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCalendarWeekClass" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetCalendarWeekClass</stringProp>
                <stringProp name="HtmlExtractor.expr">table.calstd.il-cal-week</stringProp>
                <stringProp name="HtmlExtractor.attribute">class</stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              </HtmlExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCalendarWeekClass" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1193084942">calstd il-cal-week</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetCalendarWeekClass</stringProp>
                <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Download Calendar Week " enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="cmd" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">downloadFiles</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">cmd</stringProp>
                  </elementProp>
                  <elementProp name="cmdClass" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ilcalendarweekgui</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">cmdClass</stringProp>
                  </elementProp>
                  <elementProp name="baseClass" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ilPersonalDesktopGUI</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">baseClass</stringProp>
                  </elementProp>
                  <elementProp name="seed" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${CALENDAR_DATE}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">seed</stringProp>
                  </elementProp>
                  <elementProp name="cmdNode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${ilGetCalendarWeekCommandNode_g1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">cmdNode</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCalendarWeekClass" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetCalendarWeekClass</stringProp>
                <stringProp name="HtmlExtractor.expr">table.calstd.il-cal-week</stringProp>
                <stringProp name="HtmlExtractor.attribute">class</stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              </HtmlExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCalendarWeekClass" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1193084942">calstd il-cal-week</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetCalendarWeekClass</stringProp>
                <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Calendar Month" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="cmdClass" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ilcalendarmonthgui</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">cmdClass</stringProp>
                  </elementProp>
                  <elementProp name="baseClass" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ilPersonalDesktopGUI</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">baseClass</stringProp>
                  </elementProp>
                  <elementProp name="seed" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${CALENDAR_DATE}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">seed</stringProp>
                  </elementProp>
                  <elementProp name="cmdNode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${ilGetCalendarMonthCommandNode_g1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">cmdNode</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCalendarMonthClass" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetCalendarMonthClass</stringProp>
                <stringProp name="HtmlExtractor.expr">table.calstd.il-cal-month</stringProp>
                <stringProp name="HtmlExtractor.attribute">class</stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              </HtmlExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCalendarMonthClass" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1660144194">calstd il-cal-month</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetCalendarMonthClass</stringProp>
                <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Download Calendar Month " enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="cmdClass" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ilcalendarmonthgui</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">cmdClass</stringProp>
                  </elementProp>
                  <elementProp name="cmd" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">downloadFiles</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">cmd</stringProp>
                  </elementProp>
                  <elementProp name="baseClass" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ilPersonalDesktopGUI</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">baseClass</stringProp>
                  </elementProp>
                  <elementProp name="seed" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${CALENDAR_DATE}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">seed</stringProp>
                  </elementProp>
                  <elementProp name="cmdNode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${ilGetCalendarMonthCommandNode_g1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">cmdNode</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCalendarMonthClass" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetCalendarMonthClass</stringProp>
                <stringProp name="HtmlExtractor.expr">table.calstd.il-cal-month</stringProp>
                <stringProp name="HtmlExtractor.attribute">class</stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              </HtmlExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCalendarMonthClass" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1660144194">calstd il-cal-month</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetCalendarMonthClass</stringProp>
                <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Session view" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="target" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">sess_${CALENDAR_SESSION_REF_ID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">target</stringProp>
                  </elementProp>
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${PATH}/goto.php</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetViewSessionHeaderImage" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetViewSessionHeaderImage</stringProp>
                <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                <stringProp name="HtmlExtractor.attribute">src</stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetSessionViewHeaderContent" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetSessionViewHeaderContent</stringProp>
                <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
                <stringProp name="HtmlExtractor.attribute"></stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              </HtmlExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetViewSessionHeaderImage" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="2071143292">./templates/default/images/icon_sess.svg</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetViewSessionHeaderImage</stringProp>
                <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetSessionViewHeaderContent" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-645374027">${__urldecode(${CALENDAR_SESSION_NAME})}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetSessionViewHeaderContent</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Repository" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Repository" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/goto.php?target=root_1</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryHeaderImage" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetRepositoryHeaderImage</stringProp>
              <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
              <stringProp name="HtmlExtractor.attribute">src</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryBreadcrumbUrl" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetRepositoryBreadcrumbUrl</stringProp>
              <stringProp name="HtmlExtractor.expr">ol.breadcrumb a</stringProp>
              <stringProp name="HtmlExtractor.attribute">href</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryBreadcrumbContent" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetRepositoryBreadcrumbContent</stringProp>
              <stringProp name="HtmlExtractor.expr">ol.breadcrumb a</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryHeaderContent" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetRepositoryHeaderContent</stringProp>
              <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryHeaderImage" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-167724106">/images/icon_root.svg</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetRepositoryHeaderImage</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryBreadcrumbContent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2240617">${ilGetRepositoryHeaderContent}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetRepositoryBreadcrumbContent</stringProp>
              <stringProp name="TestPlan.comments">sanity check, that we picked the right breadcrumb (must match the header)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryBreadcrumbUrl" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1449016747">ilias\.php\?ref\_id\=1\&amp;cmd\=frameset\&amp;cmdClass\=ilrepositorygui\&amp;cmdNode\=[^&amp;]*\&amp;baseClass\=ilRepositoryGUI1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetRepositoryBreadcrumbUrl</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryHeaderContent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-856324859">(?!#NV).+</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetRepositoryHeaderContent</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Courses" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Course 10 Sessions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">crs_${COURSE_10_SESSIONS_REF_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/goto.php</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCourse10HeaderImage" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetCourse10HeaderImage</stringProp>
              <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
              <stringProp name="HtmlExtractor.attribute">src</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCourse10HeaderContent" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetCourse10HeaderContent</stringProp>
              <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCourse10HeaderImage" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-462514170">./templates/default/images/icon_crs.svg</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetCourse10HeaderImage</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCourse10HeaderContent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1666068583">${__urldecode(${COURSE_10_SESSIONS_NAME})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetCourse10HeaderContent</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Course 50 Sessions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">crs_${COURSE_50_SESSIONS_REF_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/goto.php</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCourse50HeaderImage" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetCourse50HeaderImage</stringProp>
              <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
              <stringProp name="HtmlExtractor.attribute">src</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCourse50HeaderContent" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetCourse50HeaderContent</stringProp>
              <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCourse50HeaderImage" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-462514170">./templates/default/images/icon_crs.svg</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetCourse50HeaderImage</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCourse50HeaderContent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-748988771">${__urldecode(${COURSE_50_SESSIONS_NAME})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetCourse50HeaderContent</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Course 99 Sessions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">crs_${COURSE_99_SESSIONS_REF_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/goto.php</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCourse99HeaderImage" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetCourse99HeaderImage</stringProp>
              <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
              <stringProp name="HtmlExtractor.attribute">src</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetCourse99HeaderContent" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetCourse99HeaderContent</stringProp>
              <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCourse99HeaderImage" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-462514170">./templates/default/images/icon_crs.svg</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetCourse99HeaderImage</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetCourse99HeaderContent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-215625544">${__urldecode(${COURSE_99_SESSIONS_NAME})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetCourse99HeaderContent</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Forum" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Forum Threads Overview" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">frm_${FORUM_10_POSTS_REF_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/goto.php</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForumThreadsHeaderImage" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum10HeaderImage</stringProp>
              <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
              <stringProp name="HtmlExtractor.attribute">src</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForumThreadsHeaderContent" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum10HeaderContent</stringProp>
              <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForumThreadsHeaderImage" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2100511549">./templates/default/images/icon_frm.svg</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum10HeaderImage</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForumThreadsHeaderContent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1244086855">${__urldecode(${FORUM_THREADS_NAME})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum10HeaderContent</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Forum 10 Posts" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">frm_${FORUM_10_POSTS_REF_ID}_${FORUM_10_POSTS_THREAD_PK}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/goto.php</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum10HeaderImage" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum10HeaderImage</stringProp>
              <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
              <stringProp name="HtmlExtractor.attribute">src</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum10HeaderContent" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum10HeaderContent</stringProp>
              <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum10URL" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum10URL</stringProp>
              <stringProp name="HtmlExtractor.expr">#left_nav .jstree-closed &gt; a</stringProp>
              <stringProp name="HtmlExtractor.attribute">href</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              <stringProp name="Sample.scope">all</stringProp>
            </HtmlExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ilGetForum10CmdNode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ilGetForum10CmdNode</stringProp>
              <stringProp name="RegexExtractor.regex">cmdNode=(.+?)&amp;</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum10URL</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum10HeaderImage" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2100511549">./templates/default/images/icon_frm.svg</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum10HeaderImage</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum10HeaderContent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="559235729">${__urldecode(${FORUM_10_POSTS_NAME})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum10HeaderContent</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum10URL" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36139">#NV</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum10URL</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum10CmdNode" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36139">#NV</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum10CmdNode</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Forum 10 Posts Order By Date" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="viewmode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">viewmode</stringProp>
                </elementProp>
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">frm_${FORUM_10_POSTS_REF_ID}_${FORUM_10_POSTS_THREAD_PK}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/goto.php</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum10PostsOrderByDateHeaderImage" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum10PostsOrderByDateHeaderImage</stringProp>
              <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
              <stringProp name="HtmlExtractor.attribute">src</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum10PostsOrderByDateContent" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum10PostsOrderByDateHeaderContent</stringProp>
              <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum10PostsOrderByDateHeaderImage" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2100511549">./templates/default/images/icon_frm.svg</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum10PostsOrderByDateHeaderImage</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum10PostsOrderByDateContent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="559235729">${__urldecode(${FORUM_10_POSTS_NAME})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum10PostsOrderByDateHeaderContent</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Forum 10 Posts Toggle Notification First" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="cmdClass" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ilobjforumgui</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">cmdClass</stringProp>
                </elementProp>
                <elementProp name="cmd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">toggleThreadNotification</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">cmd</stringProp>
                </elementProp>
                <elementProp name="baseClass" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ilRepositoryGUI</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">baseClass</stringProp>
                </elementProp>
                <elementProp name="ref_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${FORUM_10_POSTS_REF_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ref_id</stringProp>
                </elementProp>
                <elementProp name="thr_pk" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${FORUM_10_POSTS_THREAD_PK}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">thr_pk</stringProp>
                </elementProp>
                <elementProp name="cmdNode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${ilGetForum10CmdNode_g1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">cmdNode</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum10ToogleNotification" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum10ToogleNotification</stringProp>
              <stringProp name="HtmlExtractor.expr">#headp_not_icon &gt; img</stringProp>
              <stringProp name="HtmlExtractor.attribute">src</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum10CmdNode" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36139">#NV</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum10CmdNode</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname"></stringProp>
              <stringProp name="RegexExtractor.regex">(./templates/default/images/notification_on.svg|./templates/default/images/notification_off.svg)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum10ToogleNotification</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Forum 10 Posts Toggle Notification Second" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="cmdClass" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ilobjforumgui</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">cmdClass</stringProp>
                </elementProp>
                <elementProp name="cmd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">toggleThreadNotification</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">cmd</stringProp>
                </elementProp>
                <elementProp name="baseClass" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ilRepositoryGUI</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">baseClass</stringProp>
                </elementProp>
                <elementProp name="ref_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${FORUM_10_POSTS_REF_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ref_id</stringProp>
                </elementProp>
                <elementProp name="thr_pk" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${FORUM_10_POSTS_THREAD_PK}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">thr_pk</stringProp>
                </elementProp>
                <elementProp name="cmdNode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${ilGetForum10CmdNode_g1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">cmdNode</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum10ToogleNotification" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum10ToogleNotification</stringProp>
              <stringProp name="HtmlExtractor.expr">#headp_not_icon &gt; img</stringProp>
              <stringProp name="HtmlExtractor.attribute">src</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum10CmdNode" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36139">#NV</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum10CmdNode</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname"></stringProp>
              <stringProp name="RegexExtractor.regex">(./templates/default/images/notification_on.svg|./templates/default/images/notification_off.svg)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum10ToogleNotification</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Forum 10 Posts Order By Post" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="viewmode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">viewmode</stringProp>
                </elementProp>
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">frm_${FORUM_10_POSTS_REF_ID}_${FORUM_10_POSTS_THREAD_PK}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/goto.php</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum10PostsOrderByPostHeaderImage" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum10PostsOrderByPostHeaderImage</stringProp>
              <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
              <stringProp name="HtmlExtractor.attribute">src</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum10PostsOrderByPostContent" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum10PostsOrderByPostHeaderContent</stringProp>
              <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum10PostsOrderByPostHeaderImage" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2100511549">./templates/default/images/icon_frm.svg</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum10PostsOrderByPostHeaderImage</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum10PostsOrderByPostContent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="559235729">${__urldecode(${FORUM_10_POSTS_NAME})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum10PostsOrderByPostHeaderContent</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Forum 50 Posts" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">frm_${FORUM_50_POSTS_REF_ID}_${FORUM_50_POSTS_THREAD_PK}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/goto.php</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum50HeaderImage" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum50HeaderImage</stringProp>
              <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
              <stringProp name="HtmlExtractor.attribute">src</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum50HeaderContent" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum50HeaderContent</stringProp>
              <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum50URL" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum50URL</stringProp>
              <stringProp name="HtmlExtractor.expr">#left_nav .jstree-closed &gt; a</stringProp>
              <stringProp name="HtmlExtractor.attribute">href</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              <stringProp name="Sample.scope">all</stringProp>
            </HtmlExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ilGetForum50CmdNode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ilGetForum50CmdNode</stringProp>
              <stringProp name="RegexExtractor.regex">cmdNode=(.+?)&amp;</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum50URL</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum50HeaderImage" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2100511549">./templates/default/images/icon_frm.svg</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum50HeaderImage</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum50HeaderContent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1482900979">${__urldecode(${FORUM_50_POSTS_NAME})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum50HeaderContent</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum50URL" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36139">#NV</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum50URL</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum50CmdNode" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36139">#NV</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum50CmdNode</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Forum 50 Posts Order By Date" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="viewmode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">viewmode</stringProp>
                </elementProp>
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">frm_${FORUM_50_POSTS_REF_ID}_${FORUM_50_POSTS_THREAD_PK}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/goto.php</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum50PostsOrderByDateHeaderImage" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum50PostsOrderByDateHeaderImage</stringProp>
              <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
              <stringProp name="HtmlExtractor.attribute">src</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum50PostsOrderByDateContent" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum50PostsOrderByDateHeaderContent</stringProp>
              <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum50PostsOrderByDateHeaderImage" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2100511549">./templates/default/images/icon_frm.svg</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum50PostsOrderByDateHeaderImage</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum50PostsOrderByDateContent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1482900979">${__urldecode(${FORUM_50_POSTS_NAME})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum50PostsOrderByDateHeaderContent</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Forum 50 Posts Order By Post" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="viewmode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">viewmode</stringProp>
                </elementProp>
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">frm_${FORUM_50_POSTS_REF_ID}_${FORUM_50_POSTS_THREAD_PK}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/goto.php</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum50PostsOrderByPostHeaderImage" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum50PostsOrderByPostHeaderImage</stringProp>
              <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
              <stringProp name="HtmlExtractor.attribute">src</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum50PostsOrderByPostContent" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum50PostsOrderByPostHeaderContent</stringProp>
              <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum50PostsOrderByPostHeaderImage" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2100511549">./templates/default/images/icon_frm.svg</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum50PostsOrderByPostHeaderImage</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum50PostsOrderByPostContent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1482900979">${__urldecode(${FORUM_50_POSTS_NAME})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum50PostsOrderByPostHeaderContent</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Forum 50 Posts Toggle Notification First" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="cmdClass" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ilobjforumgui</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">cmdClass</stringProp>
                </elementProp>
                <elementProp name="cmd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">toggleThreadNotification</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">cmd</stringProp>
                </elementProp>
                <elementProp name="baseClass" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ilRepositoryGUI</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">baseClass</stringProp>
                </elementProp>
                <elementProp name="ref_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${FORUM_50_POSTS_REF_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ref_id</stringProp>
                </elementProp>
                <elementProp name="thr_pk" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${FORUM_50_POSTS_THREAD_PK}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">thr_pk</stringProp>
                </elementProp>
                <elementProp name="cmdNode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${ilGetForum10CmdNode_g1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">cmdNode</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum50ToogleNotification" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum50ToogleNotification</stringProp>
              <stringProp name="HtmlExtractor.expr">#headp_not_icon &gt; img</stringProp>
              <stringProp name="HtmlExtractor.attribute">src</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum50CmdNode" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36139">#NV</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum50CmdNode</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname"></stringProp>
              <stringProp name="RegexExtractor.regex">(./templates/default/images/notification_on.svg|./templates/default/images/notification_off.svg)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum50ToogleNotification</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Forum 50 Posts Toggle Notification Second" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="cmdClass" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ilobjforumgui</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">cmdClass</stringProp>
                </elementProp>
                <elementProp name="cmd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">toggleThreadNotification</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">cmd</stringProp>
                </elementProp>
                <elementProp name="baseClass" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ilRepositoryGUI</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">baseClass</stringProp>
                </elementProp>
                <elementProp name="ref_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${FORUM_50_POSTS_REF_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ref_id</stringProp>
                </elementProp>
                <elementProp name="thr_pk" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${FORUM_50_POSTS_THREAD_PK}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">thr_pk</stringProp>
                </elementProp>
                <elementProp name="cmdNode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${ilGetForum10CmdNode_g1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">cmdNode</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum50ToogleNotification" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum50ToogleNotification</stringProp>
              <stringProp name="HtmlExtractor.expr">#headp_not_icon &gt; img</stringProp>
              <stringProp name="HtmlExtractor.attribute">src</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum50CmdNode" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36139">#NV</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum50CmdNode</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname"></stringProp>
              <stringProp name="RegexExtractor.regex">(./templates/default/images/notification_on.svg|./templates/default/images/notification_off.svg)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum50ToogleNotification</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Forum 100 Posts" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">frm_${FORUM_100_POSTS_REF_ID}_${FORUM_100_POSTS_THREAD_PK}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/goto.php</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum100HeaderImage" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum100HeaderImage</stringProp>
              <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
              <stringProp name="HtmlExtractor.attribute">src</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum100HeaderContent" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum100HeaderContent</stringProp>
              <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum100URL" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum100URL</stringProp>
              <stringProp name="HtmlExtractor.expr">#left_nav .jstree-closed &gt; a</stringProp>
              <stringProp name="HtmlExtractor.attribute">href</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              <stringProp name="Sample.scope">all</stringProp>
            </HtmlExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ilGetForum100CmdNode" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ilGetForum100CmdNode</stringProp>
              <stringProp name="RegexExtractor.regex">cmdNode=(.+?)&amp;</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum50URL</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum100HeaderImage" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2100511549">./templates/default/images/icon_frm.svg</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum100HeaderImage</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum100HeaderContent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2089244715">${__urldecode(${FORUM_100_POSTS_NAME})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum100HeaderContent</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum100URL" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36139">#NV</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum100URL</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum100CmdNode" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36139">#NV</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum100CmdNode</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Forum 100 Posts OffSet 30" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="offset" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">30</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">offset</stringProp>
                </elementProp>
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">frm_${FORUM_100_POSTS_REF_ID}_${FORUM_100_POSTS_THREAD_PK}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/goto.php</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum100HeaderImage" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum100HeaderImage</stringProp>
              <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
              <stringProp name="HtmlExtractor.attribute">src</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum100HeaderContent" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum100HeaderContent</stringProp>
              <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum100URL" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum100URL</stringProp>
              <stringProp name="HtmlExtractor.expr">#left_nav .jstree-closed &gt; a</stringProp>
              <stringProp name="HtmlExtractor.attribute">href</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              <stringProp name="Sample.scope">all</stringProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum100HeaderImage" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2100511549">./templates/default/images/icon_frm.svg</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum100HeaderImage</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum100HeaderContent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2089244715">${__urldecode(${FORUM_100_POSTS_NAME})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum100HeaderContent</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum100URL" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36139">#NV</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum100URL</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Forum 100 Posts Order By Date" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="viewmode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">viewmode</stringProp>
                </elementProp>
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">frm_${FORUM_100_POSTS_REF_ID}_${FORUM_100_POSTS_THREAD_PK}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/goto.php</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum100PostsOrderByDateHeaderImage" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum100PostsOrderByDateHeaderImage</stringProp>
              <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
              <stringProp name="HtmlExtractor.attribute">src</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum100PostsOrderByDateHeaderContent" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum100PostsOrderByDateHeaderContent</stringProp>
              <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum100PostsOrderByDateHeaderImage" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2100511549">./templates/default/images/icon_frm.svg</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum100PostsOrderByDateHeaderImage</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum100PostsOrderByDateHeaderContent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2089244715">${__urldecode(${FORUM_100_POSTS_NAME})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum100PostsOrderByDateHeaderContent</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Forum 100 Posts Order By Post" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="viewmode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">viewmode</stringProp>
                </elementProp>
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">frm_${FORUM_100_POSTS_REF_ID}_${FORUM_100_POSTS_THREAD_PK}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/goto.php</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum100PostsOrderByPostHeaderImage" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum100PostsOrderByPostHeaderImage</stringProp>
              <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
              <stringProp name="HtmlExtractor.attribute">src</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum100PostsOrderByPostHeaderContent" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum100PostsOrderByPostHeaderContent</stringProp>
              <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
              <stringProp name="HtmlExtractor.attribute"></stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum100PostsOrderByPostHeaderImage" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2100511549">./templates/default/images/icon_frm.svg</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum100PostsOrderByPostHeaderImage</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum100PostsOrderByPostHeaderContent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2089244715">${__urldecode(${FORUM_100_POSTS_NAME})}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum100PostsOrderByPostHeaderContent</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Forum 100 Posts Toggle Notification First" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="cmdClass" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ilobjforumgui</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">cmdClass</stringProp>
                </elementProp>
                <elementProp name="cmd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">toggleThreadNotification</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">cmd</stringProp>
                </elementProp>
                <elementProp name="baseClass" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ilRepositoryGUI</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">baseClass</stringProp>
                </elementProp>
                <elementProp name="ref_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${FORUM_100_POSTS_REF_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ref_id</stringProp>
                </elementProp>
                <elementProp name="thr_pk" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${FORUM_100_POSTS_THREAD_PK}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">thr_pk</stringProp>
                </elementProp>
                <elementProp name="cmdNode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${ilGetForum100CmdNode_g1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">cmdNode</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum100ToogleNotification" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum100ToogleNotification</stringProp>
              <stringProp name="HtmlExtractor.expr">#headp_not_icon &gt; img</stringProp>
              <stringProp name="HtmlExtractor.attribute">src</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum100CmdNode" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36139">#NV</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum100CmdNode</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname"></stringProp>
              <stringProp name="RegexExtractor.regex">(./templates/default/images/notification_on.svg|./templates/default/images/notification_off.svg)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum100ToogleNotification</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Forum 100 Posts Toggle Notification Second" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="cmdClass" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ilobjforumgui</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">cmdClass</stringProp>
                </elementProp>
                <elementProp name="cmd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">toggleThreadNotification</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">cmd</stringProp>
                </elementProp>
                <elementProp name="baseClass" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ilRepositoryGUI</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">baseClass</stringProp>
                </elementProp>
                <elementProp name="ref_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${FORUM_100_POSTS_REF_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ref_id</stringProp>
                </elementProp>
                <elementProp name="thr_pk" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${FORUM_100_POSTS_THREAD_PK}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">thr_pk</stringProp>
                </elementProp>
                <elementProp name="cmdNode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${ilGetForum100CmdNode_g1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">cmdNode</stringProp>
                </elementProp>
                <elementProp name="client_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">client_id</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${PATH}/ilias.php</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetForum100ToogleNotification" enabled="true">
              <stringProp name="HtmlExtractor.refname">ilGetForum100ToogleNotification</stringProp>
              <stringProp name="HtmlExtractor.expr">#headp_not_icon &gt; img</stringProp>
              <stringProp name="HtmlExtractor.attribute">src</stringProp>
              <stringProp name="HtmlExtractor.default">#NV</stringProp>
              <stringProp name="HtmlExtractor.match_number"></stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
            </HtmlExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetForum100CmdNode" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36139">#NV</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum100CmdNode</stringProp>
              <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname"></stringProp>
              <stringProp name="RegexExtractor.regex">(./templates/default/images/notification_on.svg|./templates/default/images/notification_off.svg)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">ilGetForum100ToogleNotification</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF Admin AND NOT ReadOnly" enabled="true">
          <stringProp name="IfController.condition">${IS_ADMIN} &amp;&amp; !${READ_ONLY}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TEST Manage Repository" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments">some CRUD operations with categories</stringProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Repository" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${PATH}/goto.php?target=root_1</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryHeaderImage" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetRepositoryHeaderImage</stringProp>
                <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                <stringProp name="HtmlExtractor.attribute">src</stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryBreadcrumbUrl" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetRepositoryBreadcrumbUrl</stringProp>
                <stringProp name="HtmlExtractor.expr">ol.breadcrumb a</stringProp>
                <stringProp name="HtmlExtractor.attribute">href</stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryBreadcrumbContent" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetRepositoryBreadcrumbContent</stringProp>
                <stringProp name="HtmlExtractor.expr">ol.breadcrumb a</stringProp>
                <stringProp name="HtmlExtractor.attribute"></stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryHeaderContent" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetRepositoryHeaderContent</stringProp>
                <stringProp name="HtmlExtractor.expr">#il_mhead_t_focus</stringProp>
                <stringProp name="HtmlExtractor.attribute"></stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              </HtmlExtractor>
              <hashTree/>
              <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetRepositoryNewCat" enabled="true">
                <stringProp name="HtmlExtractor.refname">ilGetRepositoryNewCat</stringProp>
                <stringProp name="HtmlExtractor.expr">div.ilNewObjectSelector a#cat</stringProp>
                <stringProp name="HtmlExtractor.attribute">href</stringProp>
                <stringProp name="HtmlExtractor.default">#NV</stringProp>
                <stringProp name="HtmlExtractor.match_number"></stringProp>
                <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
              </HtmlExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryHeaderImage" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-167724106">/images/icon_root.svg</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetRepositoryHeaderImage</stringProp>
                <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryBreadcrumbUrl" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1449016747">ilias\.php\?ref\_id\=1\&amp;cmd\=frameset\&amp;cmdClass\=ilrepositorygui\&amp;cmdNode\=[^&amp;]*\&amp;baseClass\=ilRepositoryGUI1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetRepositoryBreadcrumbUrl</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryBreadcrumbContent" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2240617">${ilGetRepositoryHeaderContent}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetRepositoryBreadcrumbContent</stringProp>
                <stringProp name="TestPlan.comments">sanity check, that we picked the right breadcrumb (must match the header)</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryHeaderContent" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-856324859">(?!#NV).+</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetRepositoryHeaderContent</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetRepositoryNewCat" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1649786606">ilias\.php\?.+</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ilGetRepositoryNewCat</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="ITERATIONS" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1266493130">ITERATIONS</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="85959">
                  <stringProp name="51">3</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="${ITERATIONS}x New Category (nested)" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${ITERATIONS}</stringProp>
            </LoopController>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="NewCategoryAction" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">NewCategoryAction = vars.get(&quot;ilPostNewCategoryNewCat&quot;);

if (NewCategoryAction == null || NewCategoryAction == &quot;#NV&quot;) {
	NewCategoryAction = vars.get(&quot;ilGetRepositoryNewCat&quot;);
}

vars.put(&quot;NewCategoryAction&quot;, NewCategoryAction);</stringProp>
                <stringProp name="scriptLanguage">jexl</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET NewCategory" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${PATH}/${NewCategoryAction}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategoryAction" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetNewCategoryAction</stringProp>
                  <stringProp name="HtmlExtractor.expr">div#accordion__1 .il_VAccordionInnerContainer:nth-child(1) form#form_</stringProp>
                  <stringProp name="HtmlExtractor.attribute">action</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategoryTitle" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetNewCategoryTitle</stringProp>
                  <stringProp name="HtmlExtractor.expr">div#accordion__1 .il_VAccordionInnerContainer:nth-child(1) form#form_ input#title</stringProp>
                  <stringProp name="HtmlExtractor.attribute">name</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategoryDescription" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetNewCategoryDescription</stringProp>
                  <stringProp name="HtmlExtractor.expr">div#accordion__1 .il_VAccordionInnerContainer:nth-child(1) form#form_ textarea#desc</stringProp>
                  <stringProp name="HtmlExtractor.attribute">name</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategorySubmit" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetNewCategorySubmit</stringProp>
                  <stringProp name="HtmlExtractor.expr">div#accordion__1 .il_VAccordionInnerContainer:nth-child(1) form#form_ input[type=submit][name=&quot;cmd[save]&quot;]</stringProp>
                  <stringProp name="HtmlExtractor.attribute">name</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategorySubmitV" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetNewCategorySubmitV</stringProp>
                  <stringProp name="HtmlExtractor.expr">div#accordion__1 .il_VAccordionInnerContainer:nth-child(1) form#form_ input[type=submit][name=&quot;cmd[save]&quot;]</stringProp>
                  <stringProp name="HtmlExtractor.attribute">value</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategoryAction" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewCategoryAction</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategoryTitle" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewCategoryTitle</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategoryDescription" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewCategoryDescription</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategorySubmit" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewCategorySubmit</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategorySubmitV" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewCategorySubmitV</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST NewCategory" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="${ilGetNewCategoryTitle}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__samplerName} @ ${__time(Y-M-D_H:M:S)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">${ilGetNewCategoryTitle}</stringProp>
                    </elementProp>
                    <elementProp name="${ilGetNewCategoryDescription}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">created by jmeter testplan ${__TestPlanName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">${ilGetNewCategoryDescription}</stringProp>
                    </elementProp>
                    <elementProp name="${ilGetNewCategorySubmit}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${ilGetNewCategorySubmitV}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">${ilGetNewCategorySubmit}</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${PATH}/${ilGetNewCategoryAction}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="FatalError" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">FatalError</stringProp>
                  <stringProp name="RegexExtractor.regex">\&lt;b\&gt;Fatal error\&lt;\/b\&gt;\:\s*(.*)\&lt;br \/\&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">#NV</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilPostNewCategoryHeaderImage" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilPostNewCategoryHeaderImage</stringProp>
                  <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                  <stringProp name="HtmlExtractor.attribute">src</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilPostNewCategoryNewCat" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilPostNewCategoryNewCat</stringProp>
                  <stringProp name="HtmlExtractor.expr">div.ilNewObjectSelector a#cat</stringProp>
                  <stringProp name="HtmlExtractor.attribute">href</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="FatalError" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">FatalError</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilPostNewCategoryHeaderImage" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1524009938">/images/icon_cat.svg</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilPostNewCategoryHeaderImage</stringProp>
                  <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilPostNewCategoryNewCat" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1649786606">ilias\.php\?.+</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilPostNewCategoryNewCat</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="not error.php" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="845794093">.*\/error\.php</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.sample_label</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="On Error Start Next Thread Loop" enabled="true">
                <intProp name="OnError.action">4</intProp>
              </ResultAction>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="${ITERATIONS}x Delete Category (nested)" enabled="false">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${ITERATIONS}</stringProp>
            </LoopController>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="NewCategoryAction" enabled="true">
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">NewCategoryAction = vars.get(&quot;ilPostNewCategoryNewCat&quot;);

if (NewCategoryAction == null || NewCategoryAction == &quot;#NV&quot;) {
	NewCategoryAction = vars.get(&quot;ilGetRepositoryNewCat&quot;);
}

vars.put(&quot;NewCategoryAction&quot;, NewCategoryAction);</stringProp>
                <stringProp name="scriptLanguage">jexl</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET DelCategory" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${PATH}/${DelCategoryAction}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategoryAction" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetNewCategoryAction</stringProp>
                  <stringProp name="HtmlExtractor.expr">div#accordion__1:nth-child(1) form#form_</stringProp>
                  <stringProp name="HtmlExtractor.attribute">action</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategoryTitle" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetNewCategoryTitle</stringProp>
                  <stringProp name="HtmlExtractor.expr">div#accordion__1:nth-child(1) form#form_ input#title</stringProp>
                  <stringProp name="HtmlExtractor.attribute">name</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategoryDescription" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetNewCategoryDescription</stringProp>
                  <stringProp name="HtmlExtractor.expr">div#accordion__1:nth-child(1) form#form_ textarea#desc</stringProp>
                  <stringProp name="HtmlExtractor.attribute">name</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategorySubmit" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetNewCategorySubmit</stringProp>
                  <stringProp name="HtmlExtractor.expr">div#accordion__1:nth-child(1) form#form_ input[type=submit][name=&quot;cmd[save]&quot;]</stringProp>
                  <stringProp name="HtmlExtractor.attribute">name</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetNewCategorySubmitV" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilGetNewCategorySubmitV</stringProp>
                  <stringProp name="HtmlExtractor.expr">div#accordion__1:nth-child(1) form#form_ input[type=submit][name=&quot;cmd[save]&quot;]</stringProp>
                  <stringProp name="HtmlExtractor.attribute">value</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategoryAction" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewCategoryAction</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategoryTitle" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewCategoryTitle</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategoryDescription" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewCategoryDescription</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategorySubmit" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewCategorySubmit</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetNewCategorySubmitV" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">12</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilGetNewCategorySubmitV</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST DelCategory" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="${ilGetNewCategoryTitle}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${__samplerName} @ ${__time(Y-M-D_H:M:S)}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">${ilGetNewCategoryTitle}</stringProp>
                    </elementProp>
                    <elementProp name="${ilGetNewCategoryDescription}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">created by jmeter testplan ${__TestPlanName}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">${ilGetNewCategoryDescription}</stringProp>
                    </elementProp>
                    <elementProp name="${ilGetNewCategorySubmit}" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${ilGetNewCategorySubmitV}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">${ilGetNewCategorySubmit}</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${PATH}/${ilGetNewCategoryAction}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="FatalError" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">FatalError</stringProp>
                  <stringProp name="RegexExtractor.regex">\&lt;b\&gt;Fatal error\&lt;\/b\&gt;\:\s*(.*)\&lt;br \/\&gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">#NV</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilPostNewCategoryHeaderImage" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilPostNewCategoryHeaderImage</stringProp>
                  <stringProp name="HtmlExtractor.expr">#headerimage</stringProp>
                  <stringProp name="HtmlExtractor.attribute">src</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilPostNewCategoryNewCat" enabled="true">
                  <stringProp name="HtmlExtractor.refname">ilPostNewCategoryNewCat</stringProp>
                  <stringProp name="HtmlExtractor.expr">div.ilNewObjectSelector a#cat</stringProp>
                  <stringProp name="HtmlExtractor.attribute">href</stringProp>
                  <stringProp name="HtmlExtractor.default">#NV</stringProp>
                  <stringProp name="HtmlExtractor.match_number"></stringProp>
                  <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                </HtmlExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="FatalError" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="36139">#NV</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">FatalError</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilPostNewCategoryHeaderImage" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1524009938">/images/icon_cat.svg</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilPostNewCategoryHeaderImage</stringProp>
                  <stringProp name="TestPlan.comments">sanity check if we are on the right page (and not forced to change password, accept user agreement, etc.)</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilPostNewCategoryNewCat" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1649786606">ilias\.php\?.+</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ilPostNewCategoryNewCat</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="not error.php" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="845794093">.*\/error\.php</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.sample_label</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="On Error Start Next Thread Loop" enabled="true">
                <intProp name="OnError.action">4</intProp>
              </ResultAction>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Sleep" enabled="true">
                <stringProp name="ConstantTimer.delay">10</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Logout" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PATH}/logout.php?lang=en</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">We set the language to &apos;en&apos; to be able to interpret the result</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="DEBUG: Snapshot Sampler (post run)" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="ilGetLogoutHeader" enabled="true">
            <stringProp name="HtmlExtractor.refname">ilGetLogoutHeader</stringProp>
            <stringProp name="HtmlExtractor.expr">.il_Header h1</stringProp>
            <stringProp name="HtmlExtractor.attribute"></stringProp>
            <stringProp name="HtmlExtractor.default">#NV</stringProp>
            <stringProp name="HtmlExtractor.match_number"></stringProp>
            <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
          </HtmlExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ilGetLogoutHeader" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2013462102">Logout</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">ilGetLogoutHeader</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="DEBUG: Inspect Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>false</time>
              <latency>false</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>false</label>
              <code>true</code>
              <message>false</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>false</assertions>
              <subresults>false</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <url>true</url>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="TestPlan.comments">temporarily place this beneath any element you want to inspect</stringProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="DEV: Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sampleCount>true</sampleCount>
            </value>
          </objProp>
          <stringProp name="filename">${OUT_DIR}/results_.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="DEBUG: Snapshot Variables" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">true</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree>
      <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="DEBUG: Snapshot Variables" enabled="true">
        <boolProp name="displayJMeterProperties">false</boolProp>
        <boolProp name="displayJMeterVariables">true</boolProp>
        <boolProp name="displaySystemProperties">false</boolProp>
      </DebugSampler>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="DEBUG: Inspect Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>false</time>
            <latency>false</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>false</label>
            <code>true</code>
            <message>false</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <url>true</url>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="TestPlan.comments">temporarily place this beneath any element you want to inspect</stringProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="DEBUG: Inspect Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>false</time>
            <latency>false</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>false</label>
            <code>true</code>
            <message>false</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <url>true</url>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="TestPlan.comments">temporarily place this beneath any element you want to inspect</stringProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ConfigTestElement guiclass="PropertyControlGui" testclass="ConfigTestElement" testname="DEBUG: Display Properties" enabled="true"/>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
